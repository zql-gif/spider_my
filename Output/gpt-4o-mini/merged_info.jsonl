{"db_id": "soccer_3", "question": "How many clubs are there?", "query": "SELECT count(*) FROM club", "predict": "SELECT COUNT(DISTINCT `club id`) AS total_clubs FROM club;", "gold_exec_result": "[(9,)]", "predict_exec_result": "no such column: club id", "exec_match": false}
{"db_id": "soccer_3", "question": "Count the number of clubs.", "query": "SELECT count(*) FROM club", "predict": "SELECT COUNT(*) AS total_clubs FROM club;", "gold_exec_result": "[(9,)]", "predict_exec_result": "[(9,)]", "exec_match": true}
{"db_id": "soccer_3", "question": "List the name of clubs in ascending alphabetical order.", "query": "SELECT Name FROM club ORDER BY Name ASC", "predict": "SELECT name FROM club ORDER BY name ASC;", "gold_exec_result": "[('Arsenal',), ('Aston Villa',), ('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Fulham',), ('Hull City',), ('Liverpool',)]", "predict_exec_result": "[('Arsenal',), ('Aston Villa',), ('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Fulham',), ('Hull City',), ('Liverpool',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of clubs, ordered alphabetically?", "query": "SELECT Name FROM club ORDER BY Name ASC", "predict": "SELECT name FROM club ORDER BY name ASC;", "gold_exec_result": "[('Arsenal',), ('Aston Villa',), ('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Fulham',), ('Hull City',), ('Liverpool',)]", "predict_exec_result": "[('Arsenal',), ('Aston Villa',), ('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Fulham',), ('Hull City',), ('Liverpool',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the managers and captains of clubs?", "query": "SELECT Manager ,  Captain FROM club", "predict": "SELECT manager, captain FROM club;", "gold_exec_result": "[('Ars\u00e8ne Wenger', 'Cesc F\u00e0bregas'), (\"Martin O'Neill\", 'Martin Laursen'), ('Sam Allardyce', 'Ryan Nelsen'), ('Gary Megson', 'Kevin Davies'), ('Guus Hiddink', 'John Terry'), ('David Moyes', 'Phil Neville'), ('Roy Hodgson', 'Danny Murphy'), ('Phil Brown', 'Ian Ashbee'), ('Rafael Ben\u00edtez', 'Steven Gerrard')]", "predict_exec_result": "[('Ars\u00e8ne Wenger', 'Cesc F\u00e0bregas'), (\"Martin O'Neill\", 'Martin Laursen'), ('Sam Allardyce', 'Ryan Nelsen'), ('Gary Megson', 'Kevin Davies'), ('Guus Hiddink', 'John Terry'), ('David Moyes', 'Phil Neville'), ('Roy Hodgson', 'Danny Murphy'), ('Phil Brown', 'Ian Ashbee'), ('Rafael Ben\u00edtez', 'Steven Gerrard')]", "exec_match": true}
{"db_id": "soccer_3", "question": "Return the managers and captains of all clubs.", "query": "SELECT Manager ,  Captain FROM club", "predict": "SELECT manager, captain FROM club;", "gold_exec_result": "[('Ars\u00e8ne Wenger', 'Cesc F\u00e0bregas'), (\"Martin O'Neill\", 'Martin Laursen'), ('Sam Allardyce', 'Ryan Nelsen'), ('Gary Megson', 'Kevin Davies'), ('Guus Hiddink', 'John Terry'), ('David Moyes', 'Phil Neville'), ('Roy Hodgson', 'Danny Murphy'), ('Phil Brown', 'Ian Ashbee'), ('Rafael Ben\u00edtez', 'Steven Gerrard')]", "predict_exec_result": "[('Ars\u00e8ne Wenger', 'Cesc F\u00e0bregas'), (\"Martin O'Neill\", 'Martin Laursen'), ('Sam Allardyce', 'Ryan Nelsen'), ('Gary Megson', 'Kevin Davies'), ('Guus Hiddink', 'John Terry'), ('David Moyes', 'Phil Neville'), ('Roy Hodgson', 'Danny Murphy'), ('Phil Brown', 'Ian Ashbee'), ('Rafael Ben\u00edtez', 'Steven Gerrard')]", "exec_match": true}
{"db_id": "soccer_3", "question": "List the name of clubs whose manufacturer is not \"Nike\"", "query": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"", "predict": "SELECT name FROM club WHERE manufacturer != 'Nike';", "gold_exec_result": "[('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Hull City',), ('Liverpool',)]", "predict_exec_result": "[('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Hull City',), ('Liverpool',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of clubs who do not have the manufacturer Nike?", "query": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"", "predict": "SELECT name FROM club WHERE manufacturer != 'Nike';", "gold_exec_result": "[('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Hull City',), ('Liverpool',)]", "predict_exec_result": "[('Blackburn Rovers',), ('Bolton Wanderers',), ('Chelsea',), ('Everton',), ('Hull City',), ('Liverpool',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of players in ascending order of wins count?", "query": "SELECT Name FROM player ORDER BY Wins_count ASC", "predict": "SELECT name FROM player ORDER BY wins count ASC;", "gold_exec_result": "[('Greg Norman',), ('Jim Gallagher, Jr.',), ('David Frost',), ('Paul Azinger',), ('Nick Price',)]", "predict_exec_result": "near \"count\": syntax error", "exec_match": false}
{"db_id": "soccer_3", "question": "Return the names of players in order of count of wins, ascending.", "query": "SELECT Name FROM player ORDER BY Wins_count ASC", "predict": "SELECT name FROM player ORDER BY wins count ASC;", "gold_exec_result": "[('Greg Norman',), ('Jim Gallagher, Jr.',), ('David Frost',), ('Paul Azinger',), ('Nick Price',)]", "predict_exec_result": "near \"count\": syntax error", "exec_match": false}
{"db_id": "soccer_3", "question": "What is the name of the player with the highest earnings?", "query": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT name FROM player ORDER BY earnings DESC LIMIT 1;", "gold_exec_result": "[('Nick Price',)]", "predict_exec_result": "[('Nick Price',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Return the name of the player who earns the most money.", "query": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT name FROM player ORDER BY earnings DESC LIMIT 1;", "gold_exec_result": "[('Nick Price',)]", "predict_exec_result": "[('Nick Price',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the distinct countries of players with earnings higher than 1200000?", "query": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000", "predict": "SELECT DISTINCT country FROM player WHERE earnings > 1200000;", "gold_exec_result": "[('Zimbabwe',), ('United States',), ('Australia',)]", "predict_exec_result": "[('Zimbabwe',), ('United States',), ('Australia',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "From which countries are players who make more than 1200000 from?", "query": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000", "predict": "SELECT DISTINCT country FROM player WHERE earnings > 1200000;", "gold_exec_result": "[('Zimbabwe',), ('United States',), ('Australia',)]", "predict_exec_result": "[('Zimbabwe',), ('United States',), ('Australia',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?", "query": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT country FROM player WHERE earnings = (SELECT MAX(earnings) FROM player WHERE wins count > 2);", "gold_exec_result": "[('Zimbabwe',)]", "predict_exec_result": "near \"count\": syntax error", "exec_match": false}
{"db_id": "soccer_3", "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?", "query": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT country FROM player WHERE earnings = (SELECT MAX(earnings) FROM player WHERE wins count > 2);", "gold_exec_result": "[('Zimbabwe',)]", "predict_exec_result": "near \"count\": syntax error", "exec_match": false}
{"db_id": "soccer_3", "question": "Show names of players and names of clubs they are in.", "query": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "predict": "SELECT p.name AS player_name, c.name AS club_name FROM player p INNER JOIN club c ON p.club_id = c.club_id;", "gold_exec_result": "[('Nick Price', 'Arsenal'), ('Paul Azinger', 'Blackburn Rovers'), ('Greg Norman', 'Chelsea'), ('Jim Gallagher, Jr.', 'Everton'), ('David Frost', 'Fulham')]", "predict_exec_result": "[('Nick Price', 'Arsenal'), ('Paul Azinger', 'Blackburn Rovers'), ('Greg Norman', 'Chelsea'), ('Jim Gallagher, Jr.', 'Everton'), ('David Frost', 'Fulham')]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of players and the corresponding clubs that they are in?", "query": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "predict": "SELECT p.name AS player_name, c.name AS club_name FROM player p INNER JOIN club c ON p.club_id = c.club_id;", "gold_exec_result": "[('Nick Price', 'Arsenal'), ('Paul Azinger', 'Blackburn Rovers'), ('Greg Norman', 'Chelsea'), ('Jim Gallagher, Jr.', 'Everton'), ('David Frost', 'Fulham')]", "predict_exec_result": "[('Nick Price', 'Arsenal'), ('Paul Azinger', 'Blackburn Rovers'), ('Greg Norman', 'Chelsea'), ('Jim Gallagher, Jr.', 'Everton'), ('David Frost', 'Fulham')]", "exec_match": true}
{"db_id": "soccer_3", "question": "Show names of clubs that have players with more than 2 win counts.", "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2", "predict": "SELECT DISTINCT c.name FROM club c INNER JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;", "gold_exec_result": "[('Arsenal',), ('Blackburn Rovers',)]", "predict_exec_result": "[('Arsenal',), ('Blackburn Rovers',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of clubs that have players who have won more than twice?", "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2", "predict": "SELECT DISTINCT c.name FROM club c INNER JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2;", "gold_exec_result": "[('Arsenal',), ('Blackburn Rovers',)]", "predict_exec_result": "[('Arsenal',), ('Blackburn Rovers',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Show names of players from the club with manager \"Sam Allardyce\".", "query": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"", "predict": "SELECT p.name FROM player p INNER JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce';", "gold_exec_result": "[('Paul Azinger',)]", "predict_exec_result": "[('Paul Azinger',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of players from the club managed by Sam Allardyce?", "query": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"", "predict": "SELECT p.name FROM player p INNER JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce';", "gold_exec_result": "[('Paul Azinger',)]", "predict_exec_result": "[('Paul Azinger',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Show names of clubs in descending order of average earnings of players belonging.", "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC", "predict": "SELECT c.name FROM club c INNER JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC;", "gold_exec_result": "[('Arsenal',), ('Blackburn Rovers',), ('Chelsea',), ('Everton',), ('Fulham',)]", "predict_exec_result": "[('Arsenal',), ('Blackburn Rovers',), ('Chelsea',), ('Everton',), ('Fulham',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of clubs, ordered descending by the average earnings of players within each?", "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC", "predict": "SELECT c.name FROM club c INNER JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC;", "gold_exec_result": "[('Arsenal',), ('Blackburn Rovers',), ('Chelsea',), ('Everton',), ('Fulham',)]", "predict_exec_result": "[('Arsenal',), ('Blackburn Rovers',), ('Chelsea',), ('Everton',), ('Fulham',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Show different manufacturers and the number of clubs they are associated with.", "query": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer", "predict": "SELECT manufacturer, COUNT(*) AS club_count FROM club GROUP BY manufacturer;", "gold_exec_result": "[('Nike', 3), ('Reebok', 1), ('Umbro', 3), ('adidas', 2)]", "predict_exec_result": "[('Nike', 3), ('Reebok', 1), ('Umbro', 3), ('adidas', 2)]", "exec_match": true}
{"db_id": "soccer_3", "question": "How many clubs use each manufacturer?", "query": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer", "predict": "SELECT manufacturer, COUNT(*) AS club_count FROM club GROUP BY manufacturer;", "gold_exec_result": "[('Nike', 3), ('Reebok', 1), ('Umbro', 3), ('adidas', 2)]", "predict_exec_result": "[('Nike', 3), ('Reebok', 1), ('Umbro', 3), ('adidas', 2)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Please show the most common manufacturer of clubs.", "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;", "gold_exec_result": "[('Umbro',)]", "predict_exec_result": "[('Umbro',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Which manufacturer is most common among clubs?", "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;", "gold_exec_result": "[('Umbro',)]", "predict_exec_result": "[('Umbro',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "List the manufacturers that are associated with more than one club.", "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1", "predict": "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) > 1;", "gold_exec_result": "[('Nike',), ('Umbro',), ('adidas',)]", "predict_exec_result": "[('Nike',), ('Umbro',), ('adidas',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Which manufacturers work for more than 1 club?", "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1", "predict": "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) > 1;", "gold_exec_result": "[('Nike',), ('Umbro',), ('adidas',)]", "predict_exec_result": "[('Nike',), ('Umbro',), ('adidas',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "List the country that have more than one player.", "query": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1", "predict": "SELECT country FROM player GROUP BY country HAVING COUNT(*) > 1;", "gold_exec_result": "[('United States',)]", "predict_exec_result": "[('United States',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Which countries have produced more than one player?", "query": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1", "predict": "SELECT country FROM player GROUP BY country HAVING COUNT(*) > 1;", "gold_exec_result": "[('United States',)]", "predict_exec_result": "[('United States',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "List the name of clubs that do not have players.", "query": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "predict": "SELECT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id WHERE p.player_id IS NULL;", "gold_exec_result": "[('Aston Villa',), ('Bolton Wanderers',), ('Hull City',), ('Liverpool',)]", "predict_exec_result": "[('Aston Villa',), ('Bolton Wanderers',), ('Hull City',), ('Liverpool',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the names of clubs that do not have any players?", "query": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "predict": "SELECT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id WHERE p.player_id IS NULL;", "gold_exec_result": "[('Aston Villa',), ('Bolton Wanderers',), ('Hull City',), ('Liverpool',)]", "predict_exec_result": "[('Aston Villa',), ('Bolton Wanderers',), ('Hull City',), ('Liverpool',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.", "query": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000", "predict": "(SELECT country FROM player WHERE earnings > 1400000) UNION (SELECT country FROM player WHERE earnings < 1100000);", "gold_exec_result": "[('United States',)]", "predict_exec_result": "near \"(\": syntax error", "exec_match": false}
{"db_id": "soccer_3", "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?", "query": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000", "predict": "SELECT country FROM player WHERE earnings > 1400000 OR earnings < 1100000 GROUP BY country HAVING COUNT(DISTINCT CASE WHEN earnings > 1400000 THEN 1 END) > 0 AND COUNT(DISTINCT CASE WHEN earnings < 1100000 THEN 1 END) > 0;", "gold_exec_result": "[('United States',)]", "predict_exec_result": "[('United States',)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What is the number of distinct countries of all players?", "query": "SELECT COUNT (DISTINCT Country) FROM player", "predict": "SELECT COUNT(DISTINCT country) AS distinct_country_count FROM player;", "gold_exec_result": "[(4,)]", "predict_exec_result": "[(4,)]", "exec_match": true}
{"db_id": "soccer_3", "question": "How many different countries are players from?", "query": "SELECT COUNT (DISTINCT Country) FROM player", "predict": "SELECT COUNT(DISTINCT country) AS different_countries_count FROM player;", "gold_exec_result": "[(4,)]", "predict_exec_result": "[(4,)]", "exec_match": true}
{"db_id": "soccer_3", "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".", "query": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"", "predict": "SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe');", "gold_exec_result": "[(1478557.0,), (1359653.0,)]", "predict_exec_result": "[(1478557.0,), (1359653.0,)]", "exec_match": true}
{"db_id": "soccer_3", "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?", "query": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"", "predict": "SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe');", "gold_exec_result": "[(1478557.0,), (1359653.0,)]", "predict_exec_result": "[(1478557.0,), (1359653.0,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.", "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3", "predict": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND SUM(oi.product_id) >= 3;", "gold_exec_result": "[(13, 'Jamel', 'Koelpin')]", "predict_exec_result": "[]", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?", "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3", "predict": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3;", "gold_exec_result": "[(13, 'Jamel', 'Koelpin')]", "predict_exec_result": "[]", "exec_match": false}
{"db_id": "e_commerce", "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.", "query": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id", "predict": "SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id;", "gold_exec_result": "[(1, 'Cancelled', 1), (3, 'Cancelled', 2), (4, 'Delivered', 1), (6, 'Delivered', 1), (7, 'Part Completed', 1), (8, 'Part Completed', 1), (10, 'Part Completed', 2), (17, 'Delivered', 1), (18, 'Cancelled', 2), (19, 'Part Completed', 2), (20, 'Cancelled', 1)]", "predict_exec_result": "[(1, 'Cancelled', 1), (3, 'Cancelled', 2), (4, 'Delivered', 1), (6, 'Delivered', 1), (7, 'Part Completed', 1), (8, 'Part Completed', 1), (10, 'Part Completed', 2), (17, 'Delivered', 1), (18, 'Cancelled', 2), (19, 'Part Completed', 2), (20, 'Cancelled', 1)]", "exec_match": true}
{"db_id": "e_commerce", "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?", "query": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id", "predict": "SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id;", "gold_exec_result": "[(1, 'Cancelled', 1), (3, 'Cancelled', 2), (4, 'Delivered', 1), (6, 'Delivered', 1), (7, 'Part Completed', 1), (8, 'Part Completed', 1), (10, 'Part Completed', 2), (17, 'Delivered', 1), (18, 'Cancelled', 2), (19, 'Part Completed', 2), (20, 'Cancelled', 1)]", "predict_exec_result": "[(1, 'Cancelled', 1), (3, 'Cancelled', 2), (4, 'Delivered', 1), (6, 'Delivered', 1), (7, 'Part Completed', 1), (8, 'Part Completed', 1), (10, 'Part Completed', 2), (17, 'Delivered', 1), (18, 'Cancelled', 2), (19, 'Part Completed', 2), (20, 'Cancelled', 1)]", "exec_match": true}
{"db_id": "e_commerce", "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.", "query": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1", "predict": "SELECT o.date_order_placed FROM orders o LEFT JOIN order_items oi ON o.order_id = oi.order_id WHERE o.date_order_placed = (SELECT MIN(date_order_placed) FROM orders) OR COUNT(oi.order_item_id) > 1 GROUP BY o.order_id;", "gold_exec_result": "[('2017-05-02 00:04:13',), ('2017-05-15 15:13:44',), ('2017-09-10 08:27:04',), ('2017-09-25 14:30:23',), ('2017-12-10 23:45:42',)]", "predict_exec_result": "misuse of aggregate: COUNT()", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?", "query": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1", "predict": "SELECT o.date_order_placed FROM orders o LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING MIN(o.date_order_placed) OR COUNT(oi.order_item_id) > 1;", "gold_exec_result": "[('2017-05-02 00:04:13',), ('2017-05-15 15:13:44',), ('2017-09-10 08:27:04',), ('2017-09-25 14:30:23',), ('2017-12-10 23:45:42',)]", "predict_exec_result": "[('2017-09-17 16:13:07',), ('2017-10-14 12:05:48',), ('2017-09-10 08:27:04',), ('2018-03-19 21:48:59',), ('2017-09-17 07:48:34',), ('2018-03-07 15:34:19',), ('2017-12-02 13:40:02',), ('2018-03-01 04:18:28',), ('2018-03-01 05:25:55',), ('2017-09-25 14:30:23',), ('2017-05-27 10:55:13',), ('2017-11-06 00:37:20',), ('2017-09-26 06:53:48',), ('2017-05-02 00:04:13',), ('2017-11-23 04:27:11',), ('2017-07-19 12:45:12',), ('2017-10-27 11:27:07',), ('2017-05-15 15:13:44',), ('2017-12-10 23:45:42',), ('2017-09-20 22:18:50',)]", "exec_match": false}
{"db_id": "e_commerce", "question": "Which customers did not make any orders? List the first name, middle initial and last name.", "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id", "predict": "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;", "gold_exec_result": "[('Angeline', 'H', 'Huel'), ('David', 'T', 'West'), ('Jailyn', 'C', 'Murray'), ('Marlen', 'W', 'Anderson')]", "predict_exec_result": "[('Jailyn', 'C', 'Murray'), ('David', 'T', 'West'), ('Marlen', 'W', 'Anderson'), ('Angeline', 'H', 'Huel')]", "exec_match": true}
{"db_id": "e_commerce", "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?", "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id", "predict": "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;", "gold_exec_result": "[('Angeline', 'H', 'Huel'), ('David', 'T', 'West'), ('Jailyn', 'C', 'Murray'), ('Marlen', 'W', 'Anderson')]", "predict_exec_result": "[('Jailyn', 'C', 'Murray'), ('David', 'T', 'West'), ('Marlen', 'W', 'Anderson'), ('Angeline', 'H', 'Huel')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?", "query": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2", "predict": "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) < 2;", "gold_exec_result": "[(2, 'Dell keyboard', 104, 'Yellow')]", "predict_exec_result": "[(2, 'Dell keyboard', 104, 'Yellow')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?", "query": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2", "predict": "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) < 2;", "gold_exec_result": "[(2, 'Dell keyboard', 104, 'Yellow')]", "predict_exec_result": "[(2, 'Dell keyboard', 104, 'Yellow')]", "exec_match": true}
{"db_id": "e_commerce", "question": "Which orders have at least 2 products on it? List the order id and date.", "query": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2", "predict": "SELECT o.order_id, o.date_order_placed FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.product_id) >= 2;", "gold_exec_result": "[(3, '2017-09-10 08:27:04'), (10, '2017-09-25 14:30:23'), (18, '2017-05-15 15:13:44'), (19, '2017-12-10 23:45:42')]", "predict_exec_result": "[(3, '2017-09-10 08:27:04'), (10, '2017-09-25 14:30:23'), (18, '2017-05-15 15:13:44'), (19, '2017-12-10 23:45:42')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the ids and dates of the orders with at least two products?", "query": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2", "predict": "SELECT o.order_id, o.date_order_placed FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) >= 2;", "gold_exec_result": "[(3, '2017-09-10 08:27:04'), (10, '2017-09-25 14:30:23'), (18, '2017-05-15 15:13:44'), (19, '2017-12-10 23:45:42')]", "predict_exec_result": "[(3, '2017-09-10 08:27:04'), (10, '2017-09-25 14:30:23'), (18, '2017-05-15 15:13:44'), (19, '2017-12-10 23:45:42')]", "exec_match": true}
{"db_id": "e_commerce", "question": "Which product are listed in orders most frequently? List the id, product name and price.", "query": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT p.product_id, p.product_name, p.product_price FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;", "gold_exec_result": "[(3, 'iPhone6s', 560.93)]", "predict_exec_result": "[(3, 'iPhone6s', 560.93)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the ids, names, and prices of all products that are ordered most frequently?", "query": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT p.product_id, p.product_name, p.product_price FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY COUNT(oi.order_item_id) DESC;", "gold_exec_result": "[(3, 'iPhone6s', 560.93)]", "predict_exec_result": "[(3, 'iPhone6s', 560.93), (1, 'Dell monitor', 795.62), (5, 'Lenovo keyboard', 382.67), (4, 'iWatch', 369.11), (2, 'Dell keyboard', 104)]", "exec_match": false}
{"db_id": "e_commerce", "question": "Which order have the least sum of the product prices. List the order id and sum.", "query": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1", "predict": "SELECT o.order_id, SUM(p.product_price) AS total_price FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_price ASC LIMIT 1;", "gold_exec_result": "[(7, 104)]", "predict_exec_result": "[(7, 104)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What is the order that total cost the least , and how much is the total cost ?", "query": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1", "predict": "SELECT o.order_id, SUM(p.product_price) AS total_cost FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;", "gold_exec_result": "[(7, 104)]", "predict_exec_result": "[(7, 104)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What is the most popular payment method?", "query": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT payment_method_code, COUNT(*) AS method_count FROM customer_payment_methods GROUP BY payment_method_code ORDER BY method_count DESC LIMIT 1;", "gold_exec_result": "[('Credit Card',)]", "predict_exec_result": "[('Credit Card', 8)]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the payment method that most customers use?", "query": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT payment_method_code, COUNT(*) AS usage_count FROM customer_payment_methods GROUP BY payment_method_code ORDER BY usage_count DESC LIMIT 1;", "gold_exec_result": "[('Credit Card',)]", "predict_exec_result": "[('Credit Card', 8)]", "exec_match": false}
{"db_id": "e_commerce", "question": "How many number of products does each gender of customers buy? List the gender and the number", "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code", "predict": "SELECT c.gender_code, COUNT(oi.product_id) AS product_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.gender_code;", "gold_exec_result": "[('Female', 2), ('Male', 12), ('Unknown', 1)]", "predict_exec_result": "[('Female', 2), ('Male', 12), ('Unknown', 1)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many products does each gender buy?", "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code", "predict": "SELECT c.gender_code, COUNT(oi.product_id) AS product_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.gender_code;", "gold_exec_result": "[('Female', 2), ('Male', 12), ('Unknown', 1)]", "predict_exec_result": "[('Female', 2), ('Male', 12), ('Unknown', 1)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many orders has each gender of customers placed?", "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code", "predict": "SELECT c.gender_code, COUNT(o.order_id) AS order_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code;", "gold_exec_result": "[('Female', 6), ('Male', 11), ('Unknown', 3)]", "predict_exec_result": "[('Female', 6), ('Male', 11), ('Unknown', 3)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many orders has each gender placed?", "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code", "predict": "SELECT c.gender_code, COUNT(o.order_id) AS order_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code;", "gold_exec_result": "[('Female', 6), ('Male', 11), ('Unknown', 3)]", "predict_exec_result": "[('Female', 6), ('Male', 11), ('Unknown', 3)]", "exec_match": true}
{"db_id": "e_commerce", "question": "List the customers' first name, middle initial, last name and payment methods.", "query": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id", "predict": "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, pm.payment_method_code FROM customers c INNER JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id;", "gold_exec_result": "[('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Carmen', 'K', 'Treutel', 'Direct Debit'), ('America', 'N', 'Nitzsche', 'Direct Debit'), ('Jamel', 'E', 'Koelpin', 'Credit Card'), ('David', 'T', 'West', 'Credit Card'), ('Rozella', 'S', 'Crooks', 'Credit Card'), ('Jamel', 'E', 'Koelpin', 'Cheque'), ('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Laurianne', 'C', 'Pfeffer', 'Credit Card'), ('Jailyn', 'C', 'Murray', 'Credit Card'), ('Zetta', 'S', 'Streich', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Cheque'), ('Vickie', 'B', 'Bergnaum', 'Credit Card'), ('Jace', 'P', 'Mraz', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Direct Debit')]", "predict_exec_result": "[('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Carmen', 'K', 'Treutel', 'Direct Debit'), ('America', 'N', 'Nitzsche', 'Direct Debit'), ('Jamel', 'E', 'Koelpin', 'Credit Card'), ('David', 'T', 'West', 'Credit Card'), ('Rozella', 'S', 'Crooks', 'Credit Card'), ('Jamel', 'E', 'Koelpin', 'Cheque'), ('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Laurianne', 'C', 'Pfeffer', 'Credit Card'), ('Jailyn', 'C', 'Murray', 'Credit Card'), ('Zetta', 'S', 'Streich', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Cheque'), ('Vickie', 'B', 'Bergnaum', 'Credit Card'), ('Jace', 'P', 'Mraz', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Direct Debit')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the first names, middle initials, last names, and payment methods of all customers?", "query": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id", "predict": "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, pm.payment_method_code FROM customers c INNER JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id;", "gold_exec_result": "[('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Carmen', 'K', 'Treutel', 'Direct Debit'), ('America', 'N', 'Nitzsche', 'Direct Debit'), ('Jamel', 'E', 'Koelpin', 'Credit Card'), ('David', 'T', 'West', 'Credit Card'), ('Rozella', 'S', 'Crooks', 'Credit Card'), ('Jamel', 'E', 'Koelpin', 'Cheque'), ('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Laurianne', 'C', 'Pfeffer', 'Credit Card'), ('Jailyn', 'C', 'Murray', 'Credit Card'), ('Zetta', 'S', 'Streich', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Cheque'), ('Vickie', 'B', 'Bergnaum', 'Credit Card'), ('Jace', 'P', 'Mraz', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Direct Debit')]", "predict_exec_result": "[('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Carmen', 'K', 'Treutel', 'Direct Debit'), ('America', 'N', 'Nitzsche', 'Direct Debit'), ('Jamel', 'E', 'Koelpin', 'Credit Card'), ('David', 'T', 'West', 'Credit Card'), ('Rozella', 'S', 'Crooks', 'Credit Card'), ('Jamel', 'E', 'Koelpin', 'Cheque'), ('Carmine', 'A', 'Steuber', 'Direct Debit'), ('Laurianne', 'C', 'Pfeffer', 'Credit Card'), ('Jailyn', 'C', 'Murray', 'Credit Card'), ('Zetta', 'S', 'Streich', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Cheque'), ('Vickie', 'B', 'Bergnaum', 'Credit Card'), ('Jace', 'P', 'Mraz', 'Credit Card'), ('Angeline', 'H', 'Huel', 'Direct Debit')]", "exec_match": true}
{"db_id": "e_commerce", "question": "List the invoices' status, date and the date of shipment.", "query": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number", "predict": "SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM invoices i INNER JOIN shipments s ON i.invoice_number = s.invoice_number;", "gold_exec_result": "[('Paid', '2018-03-14 11:58:55', '2018-02-28 00:04:11'), ('Issued', '2018-01-28 20:08:22', '2018-03-07 01:57:14'), ('Issued', '2018-03-11 02:04:42', '2018-03-18 22:23:19'), ('Paid', '2018-03-23 17:12:08', '2018-03-11 23:48:37'), ('Issued', '2018-02-17 13:52:46', '2018-02-25 21:42:52'), ('Issued', '2018-02-03 05:46:16', '2018-03-15 01:10:18'), ('Paid', '2018-02-13 02:16:55', '2018-03-14 16:21:03'), ('Paid', '2018-03-14 11:58:55', '2018-03-12 01:44:44'), ('Paid', '2018-02-14 02:48:48', '2018-03-20 01:23:34'), ('Issued', '2018-01-26 02:23:32', '2018-03-16 03:30:05'), ('Issued', '2018-01-28 20:08:22', '2018-02-25 19:24:52'), ('Issued', '2018-01-26 02:23:32', '2018-03-20 21:01:04'), ('Issued', '2018-02-17 13:52:46', '2018-03-25 15:37:44'), ('Issued', '2018-03-04 18:54:34', '2018-03-10 22:34:34'), ('Issued', '2018-03-04 18:54:34', '2018-03-09 07:24:28')]", "predict_exec_result": "[('Paid', '2018-03-14 11:58:55', '2018-02-28 00:04:11'), ('Issued', '2018-01-28 20:08:22', '2018-03-07 01:57:14'), ('Issued', '2018-03-11 02:04:42', '2018-03-18 22:23:19'), ('Paid', '2018-03-23 17:12:08', '2018-03-11 23:48:37'), ('Issued', '2018-02-17 13:52:46', '2018-02-25 21:42:52'), ('Issued', '2018-02-03 05:46:16', '2018-03-15 01:10:18'), ('Paid', '2018-02-13 02:16:55', '2018-03-14 16:21:03'), ('Paid', '2018-03-14 11:58:55', '2018-03-12 01:44:44'), ('Paid', '2018-02-14 02:48:48', '2018-03-20 01:23:34'), ('Issued', '2018-01-26 02:23:32', '2018-03-16 03:30:05'), ('Issued', '2018-01-28 20:08:22', '2018-02-25 19:24:52'), ('Issued', '2018-01-26 02:23:32', '2018-03-20 21:01:04'), ('Issued', '2018-02-17 13:52:46', '2018-03-25 15:37:44'), ('Issued', '2018-03-04 18:54:34', '2018-03-10 22:34:34'), ('Issued', '2018-03-04 18:54:34', '2018-03-09 07:24:28')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the statuses, dates, and shipment dates for all invoices?", "query": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number", "predict": "SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number;", "gold_exec_result": "[('Paid', '2018-03-14 11:58:55', '2018-02-28 00:04:11'), ('Issued', '2018-01-28 20:08:22', '2018-03-07 01:57:14'), ('Issued', '2018-03-11 02:04:42', '2018-03-18 22:23:19'), ('Paid', '2018-03-23 17:12:08', '2018-03-11 23:48:37'), ('Issued', '2018-02-17 13:52:46', '2018-02-25 21:42:52'), ('Issued', '2018-02-03 05:46:16', '2018-03-15 01:10:18'), ('Paid', '2018-02-13 02:16:55', '2018-03-14 16:21:03'), ('Paid', '2018-03-14 11:58:55', '2018-03-12 01:44:44'), ('Paid', '2018-02-14 02:48:48', '2018-03-20 01:23:34'), ('Issued', '2018-01-26 02:23:32', '2018-03-16 03:30:05'), ('Issued', '2018-01-28 20:08:22', '2018-02-25 19:24:52'), ('Issued', '2018-01-26 02:23:32', '2018-03-20 21:01:04'), ('Issued', '2018-02-17 13:52:46', '2018-03-25 15:37:44'), ('Issued', '2018-03-04 18:54:34', '2018-03-10 22:34:34'), ('Issued', '2018-03-04 18:54:34', '2018-03-09 07:24:28')]", "predict_exec_result": "[('Paid', '2018-03-09 07:16:07', None), ('Issued', '2018-01-28 20:08:22', '2018-02-25 19:24:52'), ('Issued', '2018-01-28 20:08:22', '2018-03-07 01:57:14'), ('Paid', '2018-02-13 02:16:55', '2018-03-14 16:21:03'), ('Issued', '2018-03-11 02:04:42', '2018-03-18 22:23:19'), ('Paid', '2018-03-14 11:58:55', '2018-02-28 00:04:11'), ('Paid', '2018-03-14 11:58:55', '2018-03-12 01:44:44'), ('Paid', '2018-02-19 22:12:45', None), ('Paid', '2018-02-14 02:48:48', '2018-03-20 01:23:34'), ('Paid', '2018-03-20 00:29:12', None), ('Issued', '2018-02-17 13:52:46', '2018-02-25 21:42:52'), ('Issued', '2018-02-17 13:52:46', '2018-03-25 15:37:44'), ('Issued', '2018-02-17 11:18:32', None), ('Issued', '2018-03-04 18:54:34', '2018-03-09 07:24:28'), ('Issued', '2018-03-04 18:54:34', '2018-03-10 22:34:34'), ('Paid', '2018-03-05 20:09:18', None), ('Issued', '2018-01-26 02:23:32', '2018-03-16 03:30:05'), ('Issued', '2018-01-26 02:23:32', '2018-03-20 21:01:04'), ('Paid', '2018-03-23 17:12:08', '2018-03-11 23:48:37'), ('Issued', '2018-02-03 05:46:16', '2018-03-15 01:10:18')]", "exec_match": false}
{"db_id": "e_commerce", "question": "List the names of the products being shipped and the corresponding shipment date.", "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id", "predict": "SELECT p.product_name, s.shipment_date FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[('Dell monitor', '2018-03-11 23:48:37'), ('Dell monitor', '2018-03-14 16:21:03'), ('Lenovo keyboard', '2018-03-09 07:24:28'), ('Dell monitor', '2018-03-12 01:44:44'), ('iPhone6s', '2018-03-20 01:23:34'), ('Dell monitor', '2018-03-15 01:10:18')]", "predict_exec_result": "[('iWatch', '2018-03-11 23:48:37'), ('iPhone6s', '2018-03-16 03:30:05'), ('Dell keyboard', '2018-02-28 00:04:11'), ('Dell keyboard', '2018-03-25 15:37:44'), ('Dell monitor', '2018-03-20 01:23:34'), ('Lenovo keyboard', '2018-03-20 01:23:34'), ('iPhone6s', '2018-02-25 19:24:52'), ('iPhone6s', '2018-03-07 01:57:14'), ('iPhone6s', '2018-03-09 07:24:28'), ('iWatch', '2018-03-20 21:01:04')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the names of the products tht have been shipped, and on what days were they shipped?", "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id", "predict": "SELECT p.product_name, s.shipment_date FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[('Dell monitor', '2018-03-11 23:48:37'), ('Dell monitor', '2018-03-14 16:21:03'), ('Lenovo keyboard', '2018-03-09 07:24:28'), ('Dell monitor', '2018-03-12 01:44:44'), ('iPhone6s', '2018-03-20 01:23:34'), ('Dell monitor', '2018-03-15 01:10:18')]", "predict_exec_result": "[('iWatch', '2018-03-11 23:48:37'), ('iPhone6s', '2018-03-16 03:30:05'), ('Dell keyboard', '2018-02-28 00:04:11'), ('Dell keyboard', '2018-03-25 15:37:44'), ('Dell monitor', '2018-03-20 01:23:34'), ('Lenovo keyboard', '2018-03-20 01:23:34'), ('iPhone6s', '2018-02-25 19:24:52'), ('iPhone6s', '2018-03-07 01:57:14'), ('iPhone6s', '2018-03-09 07:24:28'), ('iWatch', '2018-03-20 21:01:04')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?", "query": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id", "predict": "SELECT oi.order_item_status_code, s.shipment_date, s.shipment_tracking_number FROM order_items oi INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[('Out of Stock', '6074'), ('Out of Stock', '8731'), ('Out of Stock', '5506'), ('Out of Stock', '6804'), ('Out of Stock', '4377'), ('Out of Stock', '3335')]", "predict_exec_result": "[('Delivered', '2018-03-11 23:48:37', '6074'), ('Out of Stock', '2018-03-16 03:30:05', '8149'), ('Delivered', '2018-03-25 15:37:44', '4276'), ('Delivered', '2018-02-28 00:04:11', '6900'), ('Delivered', '2018-03-20 01:23:34', '4377'), ('Out of Stock', '2018-03-20 01:23:34', '4377'), ('Delivered', '2018-03-07 01:57:14', '3499'), ('Delivered', '2018-03-09 07:24:28', '5506'), ('Delivered', '2018-02-25 19:24:52', '9190'), ('Delivered', '2018-03-20 21:01:04', '9206')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?", "query": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id", "predict": "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi INNER JOIN shipments s ON oi.order_id = s.order_id WHERE s.shipment_date IS NOT NULL;", "gold_exec_result": "[('Out of Stock', '6074'), ('Out of Stock', '8731'), ('Out of Stock', '5506'), ('Out of Stock', '6804'), ('Out of Stock', '4377'), ('Out of Stock', '3335')]", "predict_exec_result": "[('Delivered', '6900'), ('Delivered', '3499'), ('Delivered', '6074'), ('Delivered', '4377'), ('Out of Stock', '4377'), ('Out of Stock', '8149'), ('Delivered', '9190'), ('Delivered', '9206'), ('Delivered', '4276'), ('Delivered', '5506')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the product name and the color of the ordered items which have been shipped?", "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id", "predict": "SELECT p.product_name, p.product_color FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[('Dell monitor', 'Red'), ('Dell monitor', 'Red'), ('Lenovo keyboard', 'Yellow'), ('Dell monitor', 'Red'), ('iPhone6s', 'Red'), ('Dell monitor', 'Red')]", "predict_exec_result": "[('iWatch', 'Red'), ('iPhone6s', 'Red'), ('Dell keyboard', 'Yellow'), ('Dell keyboard', 'Yellow'), ('Dell monitor', 'Red'), ('Lenovo keyboard', 'Yellow'), ('iPhone6s', 'Red'), ('iPhone6s', 'Red'), ('iPhone6s', 'Red'), ('iWatch', 'Red')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the names and colors of all products that have been shipped?", "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id", "predict": "SELECT p.product_name, p.product_color FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[('Dell monitor', 'Red'), ('Dell monitor', 'Red'), ('Lenovo keyboard', 'Yellow'), ('Dell monitor', 'Red'), ('iPhone6s', 'Red'), ('Dell monitor', 'Red')]", "predict_exec_result": "[('iWatch', 'Red'), ('iPhone6s', 'Red'), ('Dell keyboard', 'Yellow'), ('Dell keyboard', 'Yellow'), ('Dell monitor', 'Red'), ('Lenovo keyboard', 'Yellow'), ('iPhone6s', 'Red'), ('iPhone6s', 'Red'), ('iPhone6s', 'Red'), ('iWatch', 'Red')]", "exec_match": false}
{"db_id": "e_commerce", "question": "List all the distinct product names, price and descriptions which are bought by female customers.", "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'", "predict": "SELECT DISTINCT p.product_name, p.product_price, p.product_color FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN customers c ON oi.customer_id = c.customer_id WHERE c.gender_code = 'F';", "gold_exec_result": "[('iPhone6s', 560.93, 'Second hand!'), ('iWatch', 369.11, 'Designed for sports!')]", "predict_exec_result": "no such column: oi.customer_id", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the different names, prices, and descriptions for all products bought by female customers?", "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'", "predict": "SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN customers c ON oi.customer_id = c.customer_id WHERE c.gender_code = 'F';", "gold_exec_result": "[('iPhone6s', 560.93, 'Second hand!'), ('iWatch', 369.11, 'Designed for sports!')]", "predict_exec_result": "no such column: oi.customer_id", "exec_match": false}
{"db_id": "e_commerce", "question": "What are invoices status of all the orders which have not been shipped?", "query": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )", "predict": "SELECT i.invoice_status_code FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_id IS NULL;", "gold_exec_result": "[('Paid',), ('Paid',), ('Paid',), ('Issued',), ('Paid',)]", "predict_exec_result": "[('Paid',), ('Paid',), ('Paid',), ('Issued',), ('Paid',)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the invoice statuses for all orderes that have not been shipped out yet?", "query": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )", "predict": "SELECT i.invoice_status_code FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_id IS NULL;", "gold_exec_result": "[('Paid',), ('Paid',), ('Paid',), ('Issued',), ('Paid',)]", "predict_exec_result": "[('Paid',), ('Paid',), ('Paid',), ('Issued',), ('Paid',)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the total cost of all the orders ? List the order id , date , and total cost .", "query": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id", "predict": "SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_cost FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id;", "gold_exec_result": "[(1, '2017-09-17 16:13:07', 560.93), (3, '2017-09-10 08:27:04', 1178.29), (4, '2018-03-19 21:48:59', 560.93), (6, '2018-03-07 15:34:19', 560.93), (7, '2017-12-02 13:40:02', 104), (8, '2018-03-01 04:18:28', 369.11), (10, '2017-09-25 14:30:23', 1178.29), (17, '2017-10-27 11:27:07', 369.11), (18, '2017-05-15 15:13:44', 1178.29), (19, '2017-12-10 23:45:42', 1164.73), (20, '2017-09-20 22:18:50', 560.93)]", "predict_exec_result": "[(1, '2017-09-17 16:13:07', 560.93), (3, '2017-09-10 08:27:04', 1178.29), (4, '2018-03-19 21:48:59', 560.93), (6, '2018-03-07 15:34:19', 560.93), (7, '2017-12-02 13:40:02', 104), (8, '2018-03-01 04:18:28', 369.11), (10, '2017-09-25 14:30:23', 1178.29), (17, '2017-10-27 11:27:07', 369.11), (18, '2017-05-15 15:13:44', 1178.29), (19, '2017-12-10 23:45:42', 1164.73), (20, '2017-09-20 22:18:50', 560.93)]", "exec_match": true}
{"db_id": "e_commerce", "question": "For each order, what is its id, date, and total amount paid?", "query": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id", "predict": "SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id;", "gold_exec_result": "[(1, '2017-09-17 16:13:07', 560.93), (3, '2017-09-10 08:27:04', 1178.29), (4, '2018-03-19 21:48:59', 560.93), (6, '2018-03-07 15:34:19', 560.93), (7, '2017-12-02 13:40:02', 104), (8, '2018-03-01 04:18:28', 369.11), (10, '2017-09-25 14:30:23', 1178.29), (17, '2017-10-27 11:27:07', 369.11), (18, '2017-05-15 15:13:44', 1178.29), (19, '2017-12-10 23:45:42', 1164.73), (20, '2017-09-20 22:18:50', 560.93)]", "predict_exec_result": "[(1, '2017-09-17 16:13:07', 560.93), (3, '2017-09-10 08:27:04', 1178.29), (4, '2018-03-19 21:48:59', 560.93), (6, '2018-03-07 15:34:19', 560.93), (7, '2017-12-02 13:40:02', 104), (8, '2018-03-01 04:18:28', 369.11), (10, '2017-09-25 14:30:23', 1178.29), (17, '2017-10-27 11:27:07', 369.11), (18, '2017-05-15 15:13:44', 1178.29), (19, '2017-12-10 23:45:42', 1164.73), (20, '2017-09-20 22:18:50', 560.93)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many customers have placed any order?", "query": "SELECT count(DISTINCT customer_id) FROM Orders", "predict": "SELECT COUNT(DISTINCT o.order_id) AS order_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id;", "gold_exec_result": "[(11,)]", "predict_exec_result": "[(20,)]", "exec_match": false}
{"db_id": "e_commerce", "question": "How many different customers have ordered things?", "query": "SELECT count(DISTINCT customer_id) FROM Orders", "predict": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id;", "gold_exec_result": "[(11,)]", "predict_exec_result": "[(11,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many item states are there in the orders?", "query": "SELECT count(DISTINCT order_item_status_code) FROM Order_items", "predict": "SELECT COUNT(DISTINCT oi.order_item_status_code) AS item_state_count FROM order_items oi INNER JOIN shipments s ON oi.order_id = s.order_id WHERE s.shipment_id IS NOT NULL;", "gold_exec_result": "[(2,)]", "predict_exec_result": "[(2,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many different item status codes are there listed in ordered items?", "query": "SELECT count(DISTINCT order_item_status_code) FROM Order_items", "predict": "SELECT COUNT(DISTINCT oi.order_item_status_code) AS distinct_status_count FROM order_items oi;", "gold_exec_result": "[(2,)]", "predict_exec_result": "[(2,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many different payment methods are there?", "query": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods", "predict": "SELECT COUNT(DISTINCT pm.payment_method_code) AS different_payment_methods_count FROM customer_payment_methods pm;", "gold_exec_result": "[(3,)]", "predict_exec_result": "[(3,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many different payment methods can customers choose from?", "query": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods", "predict": "SELECT COUNT(DISTINCT payment_method_code) AS distinct_payment_methods_count FROM customer_payment_methods;", "gold_exec_result": "[(3,)]", "predict_exec_result": "[(3,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?", "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'", "predict": "SELECT c.login_name, c.login_password FROM customers c WHERE c.phone_number LIKE '+12%';", "gold_exec_result": "[('vwehner', '372350093217369391dd')]", "predict_exec_result": "[('vwehner', '372350093217369391dd')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?", "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'", "predict": "SELECT c.login_name, c.login_password FROM customers c WHERE c.phone_number LIKE '+12%';", "gold_exec_result": "[('vwehner', '372350093217369391dd')]", "predict_exec_result": "[('vwehner', '372350093217369391dd')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the product sizes of the products whose name has the substring 'Dell'?", "query": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'", "predict": "SELECT DISTINCT p.product_name, p.product_color, p.product_size FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id WHERE p.product_name LIKE '%Dell%';", "gold_exec_result": "[('Medium',), ('Medium',)]", "predict_exec_result": "[('Dell keyboard', 'Yellow', 'Medium'), ('Dell monitor', 'Red', 'Medium')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the sizes of all products whose name includes the word 'Dell'?", "query": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'", "predict": "SELECT p.product_size FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id WHERE p.product_name LIKE '%Dell%';", "gold_exec_result": "[('Medium',), ('Medium',)]", "predict_exec_result": "[('Medium',), ('Medium',), ('Medium',), ('Medium',), ('Medium',)]", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the product price and the product size of the products whose price is above average?", "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )", "predict": "SELECT p.product_price, p.product_size FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products);", "gold_exec_result": "[(795.62, 'Medium'), (560.93, 'Small')]", "predict_exec_result": "[(795.62, 'Medium'), (560.93, 'Small')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the prices and sizes of all products whose price is above the mean?", "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )", "predict": "SELECT p.product_price, p.product_size FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products);", "gold_exec_result": "[(795.62, 'Medium'), (560.93, 'Small')]", "predict_exec_result": "[(795.62, 'Medium'), (560.93, 'Small')]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many kinds of products have not been sold?", "query": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "predict": "SELECT COUNT(p.product_id) AS un_ordered_product_count FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL;", "gold_exec_result": "[(0,)]", "predict_exec_result": "[(0,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What is the number of products that have not been ordered yet?", "query": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "predict": "SELECT COUNT(p.product_id) AS un_ordered_product_count FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL;", "gold_exec_result": "[(0,)]", "predict_exec_result": "[(0,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many customers do not have any payment method?", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )", "predict": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM customers c LEFT JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id WHERE pm.payment_method_code IS NULL;", "gold_exec_result": "[(3,)]", "predict_exec_result": "[(3,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many customers do not have a listed payment method?", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )", "predict": "SELECT COUNT(DISTINCT c.customer_id) AS customers_without_payment_methods FROM customers c LEFT JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id WHERE pm.payment_method_code IS NULL;", "gold_exec_result": "[(3,)]", "predict_exec_result": "[(3,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are all the order status and all the dates of orders?", "query": "SELECT order_status_code ,  date_order_placed FROM Orders", "predict": "SELECT o.order_status_code, o.date_order_placed FROM orders o LEFT JOIN shipments s ON o.order_id = s.order_id WHERE s.shipment_id IS NULL;", "gold_exec_result": "[('Cancelled', '2017-09-17 16:13:07'), ('Part Completed', '2017-10-14 12:05:48'), ('Cancelled', '2017-09-10 08:27:04'), ('Delivered', '2018-03-19 21:48:59'), ('Delivered', '2017-09-17 07:48:34'), ('Delivered', '2018-03-07 15:34:19'), ('Part Completed', '2017-12-02 13:40:02'), ('Part Completed', '2018-03-01 04:18:28'), ('Part Completed', '2018-03-01 05:25:55'), ('Part Completed', '2017-09-25 14:30:23'), ('Cancelled', '2017-05-27 10:55:13'), ('Cancelled', '2017-11-06 00:37:20'), ('Part Completed', '2017-09-26 06:53:48'), ('Delivered', '2017-05-02 00:04:13'), ('Cancelled', '2017-11-23 04:27:11'), ('Cancelled', '2017-07-19 12:45:12'), ('Delivered', '2017-10-27 11:27:07'), ('Cancelled', '2017-05-15 15:13:44'), ('Part Completed', '2017-12-10 23:45:42'), ('Cancelled', '2017-09-20 22:18:50')]", "predict_exec_result": "[('Cancelled', '2017-09-17 16:13:07'), ('Part Completed', '2017-10-14 12:05:48'), ('Cancelled', '2017-09-10 08:27:04'), ('Part Completed', '2017-09-25 14:30:23'), ('Cancelled', '2017-05-27 10:55:13'), ('Part Completed', '2017-09-26 06:53:48'), ('Cancelled', '2017-07-19 12:45:12'), ('Part Completed', '2017-12-10 23:45:42'), ('Cancelled', '2017-09-20 22:18:50')]", "exec_match": false}
{"db_id": "e_commerce", "question": "What are the status codes and dates placed for all of the orders?", "query": "SELECT order_status_code ,  date_order_placed FROM Orders", "predict": "SELECT o.order_status_code, o.date_order_placed FROM orders o;", "gold_exec_result": "[('Cancelled', '2017-09-17 16:13:07'), ('Part Completed', '2017-10-14 12:05:48'), ('Cancelled', '2017-09-10 08:27:04'), ('Delivered', '2018-03-19 21:48:59'), ('Delivered', '2017-09-17 07:48:34'), ('Delivered', '2018-03-07 15:34:19'), ('Part Completed', '2017-12-02 13:40:02'), ('Part Completed', '2018-03-01 04:18:28'), ('Part Completed', '2018-03-01 05:25:55'), ('Part Completed', '2017-09-25 14:30:23'), ('Cancelled', '2017-05-27 10:55:13'), ('Cancelled', '2017-11-06 00:37:20'), ('Part Completed', '2017-09-26 06:53:48'), ('Delivered', '2017-05-02 00:04:13'), ('Cancelled', '2017-11-23 04:27:11'), ('Cancelled', '2017-07-19 12:45:12'), ('Delivered', '2017-10-27 11:27:07'), ('Cancelled', '2017-05-15 15:13:44'), ('Part Completed', '2017-12-10 23:45:42'), ('Cancelled', '2017-09-20 22:18:50')]", "predict_exec_result": "[('Cancelled', '2017-09-17 16:13:07'), ('Part Completed', '2017-10-14 12:05:48'), ('Cancelled', '2017-09-10 08:27:04'), ('Delivered', '2018-03-19 21:48:59'), ('Delivered', '2017-09-17 07:48:34'), ('Delivered', '2018-03-07 15:34:19'), ('Part Completed', '2017-12-02 13:40:02'), ('Part Completed', '2018-03-01 04:18:28'), ('Part Completed', '2018-03-01 05:25:55'), ('Part Completed', '2017-09-25 14:30:23'), ('Cancelled', '2017-05-27 10:55:13'), ('Cancelled', '2017-11-06 00:37:20'), ('Part Completed', '2017-09-26 06:53:48'), ('Delivered', '2017-05-02 00:04:13'), ('Cancelled', '2017-11-23 04:27:11'), ('Cancelled', '2017-07-19 12:45:12'), ('Delivered', '2017-10-27 11:27:07'), ('Cancelled', '2017-05-15 15:13:44'), ('Part Completed', '2017-12-10 23:45:42'), ('Cancelled', '2017-09-20 22:18:50')]", "exec_match": true}
{"db_id": "e_commerce", "question": "List the address, town and county information of the customers who live in the USA.", "query": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'", "predict": "SELECT c.address_line_1, c.town_city, c.county FROM customers c WHERE c.country = 'USA';", "gold_exec_result": "[('646 Herzog Key Suite 702', 'Port Madonnahaven', 'Israel'), ('67899 Cassin Hollow Suite 071', 'Port Korychester', 'Palau'), ('395 Christophe Trail', 'Lornaland', 'Moldova'), ('14173 Alize Summit', 'Jennyferchester', 'Saint Vincent and the Grenadines'), ('69426 Lewis Estates Suite 438', 'Greenfelderberg', 'South Georgia and the South Sandwich Islands'), ('4672 Dwight Valleys Apt. 607', 'East Fritz', 'Afghanistan'), ('0933 Mozelle Junctions Suite 416', 'Cliftonberg', 'Reunion'), ('0629 Clotilde Mission', 'Ledaville', 'Bangladesh'), ('76015 Zelma Glen Apt. 194', 'Lake Claudiefort', 'Maldives'), ('983 Jamil Way Apt. 732', 'Braunland', 'Swaziland'), ('56465 Raymond Cliffs', 'North Kristybury', 'Iceland'), ('22704 Thompson Flat', 'West Polly', 'Martinique'), ('275 Blick Squares', 'Lake Zechariahton', 'Niue'), ('03217 Cummings Causeway', 'East Laura', 'Colombia'), ('9318 Hyatt Flats Apt. 999', 'Oletaside', 'Dominican Republic')]", "predict_exec_result": "[('646 Herzog Key Suite 702', 'Port Madonnahaven', 'Israel'), ('67899 Cassin Hollow Suite 071', 'Port Korychester', 'Palau'), ('395 Christophe Trail', 'Lornaland', 'Moldova'), ('14173 Alize Summit', 'Jennyferchester', 'Saint Vincent and the Grenadines'), ('69426 Lewis Estates Suite 438', 'Greenfelderberg', 'South Georgia and the South Sandwich Islands'), ('4672 Dwight Valleys Apt. 607', 'East Fritz', 'Afghanistan'), ('0933 Mozelle Junctions Suite 416', 'Cliftonberg', 'Reunion'), ('0629 Clotilde Mission', 'Ledaville', 'Bangladesh'), ('76015 Zelma Glen Apt. 194', 'Lake Claudiefort', 'Maldives'), ('983 Jamil Way Apt. 732', 'Braunland', 'Swaziland'), ('56465 Raymond Cliffs', 'North Kristybury', 'Iceland'), ('22704 Thompson Flat', 'West Polly', 'Martinique'), ('275 Blick Squares', 'Lake Zechariahton', 'Niue'), ('03217 Cummings Causeway', 'East Laura', 'Colombia'), ('9318 Hyatt Flats Apt. 999', 'Oletaside', 'Dominican Republic')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the addresses, towns, and county information for all customers who live in the United States?", "query": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'", "predict": "SELECT c.address_line_1, c.town_city, c.county FROM customers c WHERE c.country = 'United States';", "gold_exec_result": "[('646 Herzog Key Suite 702', 'Port Madonnahaven', 'Israel'), ('67899 Cassin Hollow Suite 071', 'Port Korychester', 'Palau'), ('395 Christophe Trail', 'Lornaland', 'Moldova'), ('14173 Alize Summit', 'Jennyferchester', 'Saint Vincent and the Grenadines'), ('69426 Lewis Estates Suite 438', 'Greenfelderberg', 'South Georgia and the South Sandwich Islands'), ('4672 Dwight Valleys Apt. 607', 'East Fritz', 'Afghanistan'), ('0933 Mozelle Junctions Suite 416', 'Cliftonberg', 'Reunion'), ('0629 Clotilde Mission', 'Ledaville', 'Bangladesh'), ('76015 Zelma Glen Apt. 194', 'Lake Claudiefort', 'Maldives'), ('983 Jamil Way Apt. 732', 'Braunland', 'Swaziland'), ('56465 Raymond Cliffs', 'North Kristybury', 'Iceland'), ('22704 Thompson Flat', 'West Polly', 'Martinique'), ('275 Blick Squares', 'Lake Zechariahton', 'Niue'), ('03217 Cummings Causeway', 'East Laura', 'Colombia'), ('9318 Hyatt Flats Apt. 999', 'Oletaside', 'Dominican Republic')]", "predict_exec_result": "[]", "exec_match": false}
{"db_id": "e_commerce", "question": "List all the pairs of buyer first names and product names.", "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id", "predict": "SELECT c.customer_first_name, p.product_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id;", "gold_exec_result": "[('Carmine', 'iWatch'), ('Sincere', 'iPhone6s'), ('Laurianne', 'Dell keyboard'), ('Carmine', 'Dell monitor'), ('Jamel', 'Dell monitor'), ('Vickie', 'Dell monitor'), ('Jamel', 'Lenovo keyboard'), ('Jamel', 'iWatch'), ('Vickie', 'Lenovo keyboard'), ('Rozella', 'iPhone6s'), ('Verner', 'iPhone6s'), ('Carmine', 'Lenovo keyboard'), ('Zetta', 'iWatch'), ('Jamel', 'Dell monitor'), ('America', 'iPhone6s')]", "predict_exec_result": "[('Carmine', 'iWatch'), ('Sincere', 'iPhone6s'), ('Laurianne', 'Dell keyboard'), ('Carmine', 'Dell monitor'), ('Jamel', 'Dell monitor'), ('Vickie', 'Dell monitor'), ('Jamel', 'Lenovo keyboard'), ('Jamel', 'iWatch'), ('Vickie', 'Lenovo keyboard'), ('Rozella', 'iPhone6s'), ('Verner', 'iPhone6s'), ('Carmine', 'Lenovo keyboard'), ('Zetta', 'iWatch'), ('Jamel', 'Dell monitor'), ('America', 'iPhone6s')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the first names of all buyers and what products did they buy? List them in pairs.", "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id", "predict": "SELECT c.customer_first_name, p.product_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id;", "gold_exec_result": "[('Carmine', 'iWatch'), ('Sincere', 'iPhone6s'), ('Laurianne', 'Dell keyboard'), ('Carmine', 'Dell monitor'), ('Jamel', 'Dell monitor'), ('Vickie', 'Dell monitor'), ('Jamel', 'Lenovo keyboard'), ('Jamel', 'iWatch'), ('Vickie', 'Lenovo keyboard'), ('Rozella', 'iPhone6s'), ('Verner', 'iPhone6s'), ('Carmine', 'Lenovo keyboard'), ('Zetta', 'iWatch'), ('Jamel', 'Dell monitor'), ('America', 'iPhone6s')]", "predict_exec_result": "[('Carmine', 'iWatch'), ('Sincere', 'iPhone6s'), ('Laurianne', 'Dell keyboard'), ('Carmine', 'Dell monitor'), ('Jamel', 'Dell monitor'), ('Vickie', 'Dell monitor'), ('Jamel', 'Lenovo keyboard'), ('Jamel', 'iWatch'), ('Vickie', 'Lenovo keyboard'), ('Rozella', 'iPhone6s'), ('Verner', 'iPhone6s'), ('Carmine', 'Lenovo keyboard'), ('Zetta', 'iWatch'), ('Jamel', 'Dell monitor'), ('America', 'iPhone6s')]", "exec_match": true}
{"db_id": "e_commerce", "question": "How many items are shipped?", "query": "SELECT count(*) FROM Shipment_Items", "predict": "SELECT COUNT(oi.product_id) AS items_shipped_count FROM order_items oi INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[(6,)]", "predict_exec_result": "[(10,)]", "exec_match": false}
{"db_id": "e_commerce", "question": "How many products have been shipped?", "query": "SELECT count(*) FROM Shipment_Items", "predict": "SELECT COUNT(oi.product_id) AS products_shipped_count FROM order_items oi INNER JOIN shipments s ON oi.order_id = s.order_id;", "gold_exec_result": "[(6,)]", "predict_exec_result": "[(10,)]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the product average price?", "query": "SELECT avg(product_price) FROM Products", "predict": "SELECT AVG(p.product_price) AS average_price FROM products p;", "gold_exec_result": "[(442.466,)]", "predict_exec_result": "[(442.466,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "How much do the products cost on average?", "query": "SELECT avg(product_price) FROM Products", "predict": "SELECT AVG(product_price) AS average_price FROM products;", "gold_exec_result": "[(442.466,)]", "predict_exec_result": "[(442.466,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What is the average price of the products being ordered?", "query": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "predict": "SELECT AVG(p.product_price) AS average_price FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id;", "gold_exec_result": "[(519.036,)]", "predict_exec_result": "[(519.036,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What is the price of all products being ordered on average?", "query": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "predict": "SELECT AVG(p.product_price) AS average_price FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id;", "gold_exec_result": "[(519.036,)]", "predict_exec_result": "[(519.036,)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the email address, town and county of the customers who are of the least common gender?", "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )", "predict": "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code = (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1);", "gold_exec_result": "[('gino.cruickshank@example.org', 'Braunland', 'Swaziland')]", "predict_exec_result": "[('gino.cruickshank@example.org', 'Braunland', 'Swaziland')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?", "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )", "predict": "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code = (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1) AND c.customer_id NOT IN (SELECT DISTINCT o.customer_id FROM orders o);", "gold_exec_result": "[('gino.cruickshank@example.org', 'Braunland', 'Swaziland')]", "predict_exec_result": "[]", "exec_match": false}
{"db_id": "e_commerce", "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.", "query": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )", "predict": "SELECT o.date_order_placed FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id INNER JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT pm.payment_method_code) >= 2;", "gold_exec_result": "[('2017-10-14 12:05:48',), ('2017-09-10 08:27:04',), ('2018-03-01 04:18:28',), ('2017-09-25 14:30:23',), ('2017-12-10 23:45:42',)]", "predict_exec_result": "[('2017-10-14 12:05:48',), ('2017-09-10 08:27:04',), ('2017-12-10 23:45:42',)]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?", "query": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )", "predict": "SELECT o.date_order_placed FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id INNER JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT pm.payment_method_code) >= 2;", "gold_exec_result": "[('2017-10-14 12:05:48',), ('2017-09-10 08:27:04',), ('2018-03-01 04:18:28',), ('2017-09-25 14:30:23',), ('2017-12-10 23:45:42',)]", "predict_exec_result": "[('2017-10-14 12:05:48',), ('2017-09-10 08:27:04',), ('2017-12-10 23:45:42',)]", "exec_match": false}
{"db_id": "e_commerce", "question": "What is the most uncommon order status?", "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1", "predict": "SELECT o.order_status_code FROM orders o GROUP BY o.order_status_code ORDER BY COUNT(*) ASC LIMIT 1;", "gold_exec_result": "[('Delivered',)]", "predict_exec_result": "[('Delivered',)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What is the least common order status?", "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1", "predict": "SELECT o.order_status_code FROM orders o GROUP BY o.order_status_code ORDER BY COUNT(*) ASC LIMIT 1;", "gold_exec_result": "[('Delivered',)]", "predict_exec_result": "[('Delivered',)]", "exec_match": true}
{"db_id": "e_commerce", "question": "For all the products sold for more than 3 times, list their id and description.", "query": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3", "predict": "SELECT p.product_id, p.product_description FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3;", "gold_exec_result": "[(1, 'Latest model!'), (3, 'Second hand!')]", "predict_exec_result": "[(1, 'Latest model!'), (3, 'Second hand!')]", "exec_match": true}
{"db_id": "e_commerce", "question": "For all products sold more than 3 times, what are their ids and descriptions?", "query": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3", "predict": "SELECT p.product_id, p.product_description FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3;", "gold_exec_result": "[(1, 'Latest model!'), (3, 'Second hand!')]", "predict_exec_result": "[(1, 'Latest model!'), (3, 'Second hand!')]", "exec_match": true}
{"db_id": "e_commerce", "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.", "query": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2", "predict": "SELECT i.invoice_date, i.invoice_number FROM invoices i JOIN shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2;", "gold_exec_result": "[('2018-01-28 20:08:22', 2), ('2018-03-14 11:58:55', 5), ('2018-02-17 13:52:46', 9), ('2018-03-04 18:54:34', 11), ('2018-01-26 02:23:32', 13)]", "predict_exec_result": "[('2018-01-28 20:08:22', 2), ('2018-03-14 11:58:55', 5), ('2018-02-17 13:52:46', 9), ('2018-03-04 18:54:34', 11), ('2018-01-26 02:23:32', 13)]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?", "query": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2", "predict": "SELECT i.invoice_date, i.invoice_number FROM invoices i JOIN shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2;", "gold_exec_result": "[('2018-01-28 20:08:22', 2), ('2018-03-14 11:58:55', 5), ('2018-02-17 13:52:46', 9), ('2018-03-04 18:54:34', 11), ('2018-01-26 02:23:32', 13)]", "predict_exec_result": "[('2018-01-28 20:08:22', 2), ('2018-03-14 11:58:55', 5), ('2018-02-17 13:52:46', 9), ('2018-03-04 18:54:34', 11), ('2018-01-26 02:23:32', 13)]", "exec_match": true}
{"db_id": "e_commerce", "question": "what are all shipment tracking numbers and shipment dates?", "query": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments", "predict": "SELECT s.shipment_tracking_number, s.shipment_date FROM shipments s;", "gold_exec_result": "[('6900', '2018-02-28 00:04:11'), ('3499', '2018-03-07 01:57:14'), ('5617', '2018-03-18 22:23:19'), ('6074', '2018-03-11 23:48:37'), ('3848', '2018-02-25 21:42:52'), ('3335', '2018-03-15 01:10:18'), ('8731', '2018-03-14 16:21:03'), ('6804', '2018-03-12 01:44:44'), ('4377', '2018-03-20 01:23:34'), ('8149', '2018-03-16 03:30:05'), ('9190', '2018-02-25 19:24:52'), ('9206', '2018-03-20 21:01:04'), ('4276', '2018-03-25 15:37:44'), ('9195', '2018-03-10 22:34:34'), ('5506', '2018-03-09 07:24:28')]", "predict_exec_result": "[('6900', '2018-02-28 00:04:11'), ('3499', '2018-03-07 01:57:14'), ('5617', '2018-03-18 22:23:19'), ('6074', '2018-03-11 23:48:37'), ('3848', '2018-02-25 21:42:52'), ('3335', '2018-03-15 01:10:18'), ('8731', '2018-03-14 16:21:03'), ('6804', '2018-03-12 01:44:44'), ('4377', '2018-03-20 01:23:34'), ('8149', '2018-03-16 03:30:05'), ('9190', '2018-02-25 19:24:52'), ('9206', '2018-03-20 21:01:04'), ('4276', '2018-03-25 15:37:44'), ('9195', '2018-03-10 22:34:34'), ('5506', '2018-03-09 07:24:28')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the tracking numbers and dates for all shipments listed?", "query": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments", "predict": "SELECT s.shipment_tracking_number, s.shipment_date FROM shipments s;", "gold_exec_result": "[('6900', '2018-02-28 00:04:11'), ('3499', '2018-03-07 01:57:14'), ('5617', '2018-03-18 22:23:19'), ('6074', '2018-03-11 23:48:37'), ('3848', '2018-02-25 21:42:52'), ('3335', '2018-03-15 01:10:18'), ('8731', '2018-03-14 16:21:03'), ('6804', '2018-03-12 01:44:44'), ('4377', '2018-03-20 01:23:34'), ('8149', '2018-03-16 03:30:05'), ('9190', '2018-02-25 19:24:52'), ('9206', '2018-03-20 21:01:04'), ('4276', '2018-03-25 15:37:44'), ('9195', '2018-03-10 22:34:34'), ('5506', '2018-03-09 07:24:28')]", "predict_exec_result": "[('6900', '2018-02-28 00:04:11'), ('3499', '2018-03-07 01:57:14'), ('5617', '2018-03-18 22:23:19'), ('6074', '2018-03-11 23:48:37'), ('3848', '2018-02-25 21:42:52'), ('3335', '2018-03-15 01:10:18'), ('8731', '2018-03-14 16:21:03'), ('6804', '2018-03-12 01:44:44'), ('4377', '2018-03-20 01:23:34'), ('8149', '2018-03-16 03:30:05'), ('9190', '2018-02-25 19:24:52'), ('9206', '2018-03-20 21:01:04'), ('4276', '2018-03-25 15:37:44'), ('9195', '2018-03-10 22:34:34'), ('5506', '2018-03-09 07:24:28')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the color, description and size of the products priced below the maximum price.", "query": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )", "predict": "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price < (SELECT MAX(product_price) FROM products);", "gold_exec_result": "[('Yellow', 'Keyboard for games!', 'Medium'), ('Red', 'Second hand!', 'Small'), ('Red', 'Designed for sports!', 'Medium'), ('Yellow', 'Work smartly!', 'Medium')]", "predict_exec_result": "[('Yellow', 'Keyboard for games!', 'Medium'), ('Red', 'Second hand!', 'Small'), ('Red', 'Designed for sports!', 'Medium'), ('Yellow', 'Work smartly!', 'Medium')]", "exec_match": true}
{"db_id": "e_commerce", "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?", "query": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )", "predict": "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price < (SELECT MAX(product_price) FROM products);", "gold_exec_result": "[('Yellow', 'Keyboard for games!', 'Medium'), ('Red', 'Second hand!', 'Small'), ('Red', 'Designed for sports!', 'Medium'), ('Yellow', 'Work smartly!', 'Medium')]", "predict_exec_result": "[('Yellow', 'Keyboard for games!', 'Medium'), ('Red', 'Second hand!', 'Small'), ('Red', 'Designed for sports!', 'Medium'), ('Yellow', 'Work smartly!', 'Medium')]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Return the names of directors who are older than the average age.", "query": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)", "predict": "SELECT d.name FROM director d WHERE d.age > (SELECT AVG(age) FROM director);", "gold_exec_result": "[('DeSean Jackson',), ('Hank Baskett',), ('Greg Lewis',), ('Correll Buckhalter',)]", "predict_exec_result": "[('DeSean Jackson',), ('Hank Baskett',), ('Greg Lewis',), ('Correll Buckhalter',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Find the the name of the oldest director.", "query": "SELECT name FROM director ORDER BY age DESC LIMIT 1", "predict": "SELECT d.name FROM director d WHERE d.age = (SELECT MAX(age) FROM director);", "gold_exec_result": "[('Hank Baskett',)]", "predict_exec_result": "[('Hank Baskett',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "How many channels have the word 'bbc' in their internet link?", "query": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"", "predict": "SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%';", "gold_exec_result": "[(4,)]", "predict_exec_result": "[(4,)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "How many different digital terrestrial channels are there?", "query": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel", "predict": "SELECT COUNT(DISTINCT digital_terrestrial_channel) FROM channel;", "gold_exec_result": "[(12,)]", "predict_exec_result": "[(12,)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "List all program titles in the order of starting year. List the most recent one first.", "query": "SELECT title FROM program ORDER BY start_year DESC", "predict": "SELECT title FROM program ORDER BY start_year DESC;", "gold_exec_result": "[('Carnival',), ('Othello',), ('The Leopard',), ('Cyrano de Bergerac',), ('Caesar III: An Empire Without End',), ('Dracula',), ('Another Country',), ('The Angry Brigade',)]", "predict_exec_result": "[('Carnival',), ('Othello',), ('The Leopard',), ('Cyrano de Bergerac',), ('Caesar III: An Empire Without End',), ('Dracula',), ('Another Country',), ('The Angry Brigade',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Which director is in charge of the most programs?", "query": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT d.name FROM director d JOIN program p ON d.director_id = p.director_id GROUP BY d.director_id ORDER BY COUNT(p.program_id) DESC LIMIT 1;", "gold_exec_result": "[('Greg Lewis',)]", "predict_exec_result": "[('Greg Lewis',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Find the name and age of the director who is in charge of the most programs?", "query": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT d.name, d.age FROM director d JOIN program p ON d.director_id = p.director_id GROUP BY d.director_id ORDER BY COUNT(p.program_id) DESC LIMIT 1;", "gold_exec_result": "[('Greg Lewis', 52)]", "predict_exec_result": "[('Greg Lewis', 52)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Return the title of the program that began most recently.", "query": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1", "predict": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1;", "gold_exec_result": "[('Carnival',)]", "predict_exec_result": "[('Carnival',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Find the name and website link of the channels that have more than one program.", "query": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1", "predict": "SELECT c.name, c.internet FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY c.channel_id HAVING COUNT(p.program_id) > 1;", "gold_exec_result": "[('ITV2', 'itv.com'), ('Sky1', 'sky.com'), ('Dave', 'dave.uktv.co.uk')]", "predict_exec_result": "[('ITV2', 'itv.com'), ('Sky1', 'sky.com'), ('Dave', 'dave.uktv.co.uk')]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Find the number of programs for each channel. Return the name of each channel as well.", "query": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id", "predict": "SELECT c.name, COUNT(p.program_id) AS program_count FROM channel c LEFT JOIN program p ON c.channel_id = p.channel_id GROUP BY c.channel_id;", "gold_exec_result": "[('BBC Two', 1), ('ITV2', 2), ('Sky1', 2), ('Dave', 3)]", "predict_exec_result": "[('BBC One', 0), ('ITV', 0), ('BBC Two', 1), ('Channel 4', 0), ('Channel 5', 0), ('ITV3', 0), ('ITV2', 2), ('E4', 0), ('Sky Sports 1', 0), ('Sky1', 2), ('CBeebies', 0), ('ITV4', 0), ('BBC Three', 0), ('Dave', 3)]", "exec_match": false}
{"db_id": "bbc_channels", "question": "Find the number of channels that do not run any program.", "query": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)", "predict": "SELECT COUNT(*) FROM channel c LEFT JOIN program p ON c.channel_id = p.channel_id WHERE p.program_id IS NULL;", "gold_exec_result": "[(10,)]", "predict_exec_result": "[(10,)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "What is the name of the director who is in the \"Dracula\" program?", "query": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'", "predict": "SELECT d.name FROM director d JOIN program p ON d.director_id = p.director_id WHERE p.title = 'Dracula';", "gold_exec_result": "[('Hank Baskett',)]", "predict_exec_result": "[('Hank Baskett',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "Find the name and internet web of the channel that is directed by the most directors.", "query": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT c.name, c.internet FROM channel c JOIN director d ON c.channel_id = d.channel_id GROUP BY c.channel_id ORDER BY COUNT(d.director_id) DESC LIMIT 1;", "gold_exec_result": "[('Dave', 'dave.uktv.co.uk')]", "predict_exec_result": "no such column: d.channel_id", "exec_match": false}
{"db_id": "bbc_channels", "question": "Find the name of the directors whose age is between 30 and 60.", "query": "SELECT name FROM director WHERE age BETWEEN 30 AND 60", "predict": "SELECT d.name FROM director d WHERE d.age BETWEEN 30 AND 60;", "gold_exec_result": "[('DeSean Jackson',), ('Greg Lewis',), ('Brent Celek',), ('Correll Buckhalter',), ('Reggie Brown',), ('Brian Westbrook',), ('Jason Avant',), ('Kevin Curtis',), ('L.J. Smith',)]", "predict_exec_result": "[('DeSean Jackson',), ('Greg Lewis',), ('Brent Celek',), ('Correll Buckhalter',), ('Reggie Brown',), ('Brian Westbrook',), ('Jason Avant',), ('Kevin Curtis',), ('L.J. Smith',)]", "exec_match": true}
{"db_id": "bbc_channels", "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.", "query": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60", "predict": "SELECT c.name FROM channel c JOIN director d ON c.channel_id = d.channel_id WHERE d.age < 40 OR d.age > 60 GROUP BY c.channel_id HAVING COUNT(DISTINCT CASE WHEN d.age < 40 THEN d.director_id END) > 0 AND COUNT(DISTINCT CASE WHEN d.age > 60 THEN d.director_id END) > 0;", "gold_exec_result": "[]", "predict_exec_result": "no such column: d.channel_id", "exec_match": false}
{"db_id": "bbc_channels", "question": "Find the id and name of the channel that is not directed by Hank Baskett.", "query": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"", "predict": "SELECT c.channel_id, c.name FROM channel c WHERE c.channel_id NOT IN (SELECT d.channel_id FROM director d WHERE d.name = 'Hank Baskett');", "gold_exec_result": "[('Dave', 14), ('Dave', 14), ('ITV2', 7), ('Dave', 14), ('ITV2', 7)]", "predict_exec_result": "no such column: d.channel_id", "exec_match": false}
{"db_id": "tv_shows", "question": "How many radios are there?", "query": "SELECT count(*) FROM radio", "predict": "SELECT COUNT(*) FROM radio;", "gold_exec_result": "[(7,)]", "predict_exec_result": "[(7,)]", "exec_match": true}
{"db_id": "tv_shows", "question": "List the transmitters of radios in ascending order of erp kw .", "query": "select transmitter from radio order by erp_kw asc", "predict": "SELECT r.transmitter FROM radio r ORDER BY r.erp_kw ASC;", "gold_exec_result": "[('Mount Leinster',), ('Three Rock',), ('Cairn Hill',), ('Maghera',), ('Mullaghanish',), ('Clermont Carn',), ('Kippure',)]", "predict_exec_result": "[('Mount Leinster',), ('Three Rock',), ('Cairn Hill',), ('Maghera',), ('Mullaghanish',), ('Clermont Carn',), ('Kippure',)]", "exec_match": true}
{"db_id": "tv_shows", "question": "What are the names and original air dates of tv shows?", "query": "SELECT tv_show_name ,  Original_Airdate FROM tv_show", "predict": "SELECT tv_show_name, original_airdate FROM tv_show;", "gold_exec_result": "[('Peace and Quiet', 'September17,1988'), (\"Box O' Fun\", 'September24,1988'), ('Nighty Nightmare', 'October1,1988'), ('Fraidy Cat', 'October8,1988'), (\"Garfield's Moving Experience\", 'October15,1988'), ('Identity Crisis', 'October22,1988'), ('Weighty Problem', 'October29,1988'), ('Cabin Fever', 'November5,1988'), ('The Binky Show', 'November12,1988'), ('Magic Mutt', 'November19,1988'), ('Best of Breed', 'November26,1988'), ('Caped Avenger', 'December3,1988')]", "predict_exec_result": "[('Peace and Quiet', 'September17,1988'), (\"Box O' Fun\", 'September24,1988'), ('Nighty Nightmare', 'October1,1988'), ('Fraidy Cat', 'October8,1988'), (\"Garfield's Moving Experience\", 'October15,1988'), ('Identity Crisis', 'October22,1988'), ('Weighty Problem', 'October29,1988'), ('Cabin Fever', 'November5,1988'), ('The Binky Show', 'November12,1988'), ('Magic Mutt', 'November19,1988'), ('Best of Breed', 'November26,1988'), ('Caped Avenger', 'December3,1988')]", "exec_match": true}
{"db_id": "tv_shows", "question": "List the station names of city channels whose affiliation is not \"ABC\".", "query": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"", "predict": "SELECT station_name FROM city_channel WHERE affiliation != 'ABC';", "gold_exec_result": "[('KZKC-LP',), ('KZSD-LP',), ('KZKS-LP',), ('KZCO-LP',), ('KZFC-LP',), ('WPTV',)]", "predict_exec_result": "[('KZKC-LP',), ('KZSD-LP',), ('KZKS-LP',), ('KZCO-LP',), ('KZFC-LP',), ('WPTV',)]", "exec_match": true}
{"db_id": "tv_shows", "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.", "query": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30", "predict": "SELECT r.transmitter FROM radio r WHERE r.erp_kw > 150 OR r.erp_kw < 30;", "gold_exec_result": "[('Cairn Hill',), ('Clermont Carn',), ('Kippure',), ('Maghera',), ('Mount Leinster',), ('Mullaghanish',), ('Three Rock',)]", "predict_exec_result": "[('Cairn Hill',), ('Clermont Carn',), ('Kippure',), ('Maghera',), ('Mount Leinster',), ('Mullaghanish',), ('Three Rock',)]", "exec_match": true}
{"db_id": "tv_shows", "question": "What is the transmitter of the radio with the largest ERP_kW?", "query": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1", "predict": "SELECT r.transmitter FROM radio r ORDER BY r.erp_kw DESC LIMIT 1;", "gold_exec_result": "[('Clermont Carn',)]", "predict_exec_result": "[('Clermont Carn',)]", "exec_match": true}
{"db_id": "tv_shows", "question": "What is the average ERP across all radios?", "query": "SELECT avg(ERP_kW) FROM radio", "predict": "SELECT AVG(erp_kw) FROM radio;", "gold_exec_result": "[(75.5,)]", "predict_exec_result": "[(75.5,)]", "exec_match": true}
{"db_id": "tv_shows", "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.", "query": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation", "predict": "SELECT affiliation, COUNT(*) AS channel_count FROM city_channel GROUP BY affiliation;", "gold_exec_result": "[('ABC', 8), ('Azteca Am\u00e9rica', 5), ('NBC', 1)]", "predict_exec_result": "[('ABC', 8), ('Azteca Am\u00e9rica', 5), ('NBC', 1)]", "exec_match": true}
{"db_id": "tv_shows", "question": "Please show the most common affiliation for city channels.", "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;", "gold_exec_result": "[('ABC',)]", "predict_exec_result": "[('ABC',)]", "exec_match": true}
{"db_id": "tv_shows", "question": "List the affiliations shared by more than three city channels.", "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3", "predict": "SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(*) > 3;", "gold_exec_result": "[('ABC',), ('Azteca Am\u00e9rica',)]", "predict_exec_result": "[('ABC',), ('Azteca Am\u00e9rica',)]", "exec_match": true}
{"db_id": "tv_shows", "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.", "query": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC", "predict": "SELECT city, station_name FROM city_channel ORDER BY station_name ASC;", "gold_exec_result": "[('Bakersfield, California', 'KERO-TV'), ('San Diego', 'KGTV'), ('Denver', 'KMGH-TV'), ('Phoenix', 'KNXV-TV'), ('Denver', 'KZCO-LP'), ('Fort Collins, Colorado', 'KZFC-LP'), ('Bakersfield, California', 'KZKC-LP'), ('Colorado Springs, Colorado', 'KZKS-LP'), ('San Diego', 'KZSD-LP'), ('Tampa \u2013 St. Petersburg', 'WFTS-TV'), ('Baltimore', 'WMAR-TV'), ('West Palm Beach', 'WPTV'), ('Indianapolis', 'WRTV'), ('Detroit', 'WXYZ-TV')]", "predict_exec_result": "[('Bakersfield, California', 'KERO-TV'), ('San Diego', 'KGTV'), ('Denver', 'KMGH-TV'), ('Phoenix', 'KNXV-TV'), ('Denver', 'KZCO-LP'), ('Fort Collins, Colorado', 'KZFC-LP'), ('Bakersfield, California', 'KZKC-LP'), ('Colorado Springs, Colorado', 'KZKS-LP'), ('San Diego', 'KZSD-LP'), ('Tampa \u2013 St. Petersburg', 'WFTS-TV'), ('Baltimore', 'WMAR-TV'), ('West Palm Beach', 'WPTV'), ('Indianapolis', 'WRTV'), ('Detroit', 'WXYZ-TV')]", "exec_match": true}
{"db_id": "tv_shows", "question": "Show the transmitters of radios and the cities of the channels they are associated with.", "query": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID", "predict": "SELECT r.transmitter, c.city FROM radio r JOIN city_channel c ON r.radio_id = c.radio_id;", "gold_exec_result": "[('Cairn Hill', 'Phoenix'), ('Clermont Carn', 'Bakersfield, California'), ('Kippure', 'Bakersfield, California'), ('Maghera', 'San Diego'), ('Mullaghanish', 'San Diego'), ('Cairn Hill', 'Colorado Springs, Colorado'), ('Mount Leinster', 'Denver'), ('Kippure', 'Denver'), ('Cairn Hill', 'Tampa \u2013 St. Petersburg'), ('Clermont Carn', 'Indianapolis')]", "predict_exec_result": "no such column: c.radio_id", "exec_match": false}
{"db_id": "tv_shows", "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.", "query": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC", "predict": "SELECT r.transmitter, c.station_name FROM radio r JOIN city_channel c ON r.radio_id = c.radio_id ORDER BY r.erp_kw DESC;", "gold_exec_result": "[('Clermont Carn', 'KERO-TV'), ('Kippure', 'KZKC-LP'), ('Kippure', 'KZCO-LP'), ('Clermont Carn', 'WRTV'), ('Maghera', 'KGTV'), ('Mullaghanish', 'KGTV'), ('Cairn Hill', 'KNXV-TV'), ('Cairn Hill', 'KZKS-LP'), ('Cairn Hill', 'WFTS-TV'), ('Mount Leinster', 'KMGH-TV')]", "predict_exec_result": "no such column: c.radio_id", "exec_match": false}
{"db_id": "tv_shows", "question": "Show the transmitters of the radios and the number of city channels they are associated with.", "query": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter", "predict": "SELECT r.transmitter, COUNT(c.city_channel_id) AS city_channel_count FROM radio r LEFT JOIN city_channel c ON r.radio_id = c.radio_id GROUP BY r.transmitter;", "gold_exec_result": "[('Cairn Hill', 3), ('Clermont Carn', 2), ('Kippure', 2), ('Maghera', 1), ('Mount Leinster', 1), ('Mullaghanish', 1)]", "predict_exec_result": "no such column: c.city_channel_id", "exec_match": false}
